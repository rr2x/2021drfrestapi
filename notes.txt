>>> pip install virtualenv
>>> python -m virtualenv venv
>>> venv\scripts\activate
(venv)>>> pip install django
(venv)>>> django-admin startproject expenseapi .
(venv)>>> pip install djangorestframework
(venv)>>> pip install python-dotenv
(venv)>>> pip install djangorestframework-simplejwt
(venv)>>> pip install Faker
(venv)>>> pip install drf-yasg
(venv)>>> pip install django-cors-headers
(venv)>>> pip uninstall PyJWT
(venv)>>> pip install PyJWT==2.1.0
(venv)>>> pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2
(venv)>>> pip install python-twitter
(venv)>>> pip install facebook-sdk
(venv)>>> pip freeze > requirements.txt
(venv)>>> python manage.py startapp authentication



python manage.py makemigrations ""
python manage.py migrate

pip list --outdated

swagger (after updating settings):
  Authorize ->
    Bearer (apiKey)
    value: Bearer <tokens.access value from login>


>>> python manage.py test


use OAuth 2.0 from  google

for frontend to process google auth:
<head>
  <meta
    name='google-signin-client_id'
    content='....apps.googleusercontent.com'
  />
  <script
    src='https://apis.gogle.com/js/platform.js' async defer/>
</head>


https://developers.google.com/oauthplayground/
https://developers.facebook.com/apps/
https://developer.twitter.com/en/portal/


import from swagger to postman:
  after creating chema_view.without_ui()
  postman -> import -> link


note on blacklisting token:
  every token has an expiration (based on settings),
  to refresh access_token you need refresh_token
  the one being blacklisted will be refresh_token
  so that we can't refresh access_token once it is expired

  to remove tokens that are already expired:
  >>> python manage.py flushexpiredtokens


test data for db.sqlite3

  email: 0@0.com
  user: 0
  pass: 0

  email: test1@test1.com
  user: test1
  pass: 111111

  email: test2@test2.com
  user: test2
  pass: 111111